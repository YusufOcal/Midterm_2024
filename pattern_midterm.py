# -*- coding: utf-8 -*-
"""Pattern_Midterm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nDQkqy62i1bpnPdBEhngG8fHSXG8A2uh
"""

# Binary Classification: Breast Cancer Diagnostic Dataset
# Required Libraries

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, roc_curve, auc

data_bc_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"
data_bc = pd.read_csv(data_bc_url, header=None)
columns_bc = ["id", "diagnosis"] + [f"feature_{i}" for i in range(1, 31)]
data_bc.columns = columns_bc
data_bc.drop(["id"], axis=1, inplace=True)
data_bc["diagnosis"] = data_bc["diagnosis"].map({"M": 1, "B": 0})

X_bc = data_bc.drop("diagnosis", axis=1)
y_bc = data_bc["diagnosis"]
X_train_bc, X_test_bc, y_train_bc, y_test_bc = train_test_split(X_bc, y_bc, test_size=0.3, random_state=42)

clf = RandomForestClassifier(n_estimators=150, max_depth=10, random_state=42)
clf.fit(X_train_bc, y_train_bc)

predictions_bc = clf.predict(X_test_bc)
proba_bc = clf.predict_proba(X_test_bc)[:, 1]
cm = confusion_matrix(y_test_bc, predictions_bc)
sensitivity = cm[1, 1] / (cm[1, 0] + cm[1, 1])
specificity = cm[0, 0] / (cm[0, 0] + cm[0, 1])

ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Benign", "Malignant"]).plot(cmap="Blues")
plt.title("Confusion Matrix")
plt.show()

fpr, tpr, _ = roc_curve(y_test_bc, proba_bc)
plt.plot(fpr, tpr, label=f"AUC: {auc(fpr, tpr):.2f}")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.show()

print("Binary Classification - Breast Cancer")
print(f"Sensitivity: {sensitivity:.2f}")
print(f"Specificity: {specificity:.2f}")

"""yjklşjlkşj"""

# Regression: California Housing Prices Dataset
# Required Libraries

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.preprocessing import StandardScaler

california_data_url = "https://raw.githubusercontent.com/ageron/handson-ml/master/datasets/housing/housing.csv"
data_reg = pd.read_csv(california_data_url)
data_reg.dropna(inplace=True)

X_reg = data_reg.drop("median_house_value", axis=1)
X_reg = pd.get_dummies(X_reg, drop_first=True)
y_reg = data_reg["median_house_value"]

scaler = StandardScaler()
X_reg_scaled = scaler.fit_transform(X_reg)

X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(X_reg_scaled, y_reg, test_size=0.3, random_state=42)

reg = LinearRegression()
reg.fit(X_train_reg, y_train_reg)

predictions_reg = reg.predict(X_test_reg)
mae = mean_absolute_error(y_test_reg, predictions_reg)
r2 = r2_score(y_test_reg, predictions_reg)

plt.scatter(y_test_reg, predictions_reg, alpha=0.5)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Regression: Predictions vs Actual Values")
plt.show()

print("\nRegression - California Housing Prices")
print(f"MAE: {mae:.2f}")
print(f"R-squared: {r2:.2f}")

"""güncel"""

# Recommendation System: MovieLens 1M Dataset
# Required Libraries

!pip install scikit-surprise

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from surprise import Dataset, Reader, SVD, accuracy
from surprise.model_selection import train_test_split as surprise_train_test_split
from sklearn.metrics import r2_score
from google.colab import drive

drive.mount('/content/drive')

movies_df = pd.read_csv('/content/drive/MyDrive/Colab Datasets/archive3/movies.dat', sep='::', header=None, names=['movieId', 'title', 'genres'], engine='python', encoding='ISO-8859-1')
ratings_df = pd.read_csv('/content/drive/MyDrive/Colab Datasets/archive3/ratings.dat', sep='::', header=None, names=['userId', 'movieId', 'rating', 'timestamp'], engine='python', encoding='ISO-8859-1')
users_df = pd.read_csv('/content/drive/MyDrive/Colab Datasets/archive3/users.dat', sep='::', header=None, names=['userId', 'gender', 'age', 'occupation', 'zip'], engine='python', encoding='ISO-8859-1')

ratings_df.dropna(inplace=True)
movies_df.dropna(inplace=True)
users_df.dropna(inplace=True)

common_movie_ids = ratings_df['movieId'].isin(movies_df['movieId'])
ratings_df = ratings_df[common_movie_ids]

movies_df['genres'] = movies_df['genres'].apply(lambda x: x.split('|'))

reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(ratings_df[['userId', 'movieId', 'rating']], reader)

trainset, testset = surprise_train_test_split(data, test_size=0.2)

svd = SVD()
svd.fit(trainset)

predictions = svd.test(testset)

mae = accuracy.mae(predictions)
rmse = accuracy.rmse(predictions)

y_true = [pred.r_ui for pred in predictions]
y_pred = [pred.est for pred in predictions]
r2 = r2_score(y_true, y_pred)

print("Performans Metrikleri:")
print("-----------------------")
print(f"MAE (Mean Absolute Error): {mae:.4f}")
print(f"RMSE (Root Mean Squared Error): {rmse:.4f}")
print(f"R-squared: {r2:.4f}")

plt.figure(figsize=(10,6))
plt.hist(y_pred, bins=20, alpha=0.7, label='Predictions', color='blue')
plt.hist(y_true, bins=20, alpha=0.7, label='Actual', color='orange')
plt.legend(loc='upper left')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.title('Prediction vs Actual Ratings')
plt.show()

plt.figure(figsize=(8,6))
plt.scatter(y_true, y_pred, alpha=0.5, color='green')
plt.plot([1, 5], [1, 5], color='red', linestyle='--')
plt.xlabel('Actual Ratings')
plt.ylabel('Predicted Ratings')
plt.title('Actual vs Predicted Ratings (Scatter Plot)')
plt.show()

